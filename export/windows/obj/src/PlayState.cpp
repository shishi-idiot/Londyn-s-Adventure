// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Coin
#include <Coin.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmo3Loader
#include <flixel/addons/editors/ogmo/FlxOgmo3Loader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_13_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",13,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_22_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",22,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_58_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",58,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_70_playerOverlapsCoins,"PlayState","playerOverlapsCoins",0x50852b64,"PlayState.playerOverlapsCoins","PlayState.hx",70,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_74_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",74,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_13_new)
HXDLIN(  13)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_22_create)
HXLINE(  23)		::haxe::Log_obj::trace(HX_("BOOTED UP BABY",2c,33,76,b0),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),23,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE(  25)		::flixel::FlxG_obj::camera->fade(-16777216,1,true,null(),null());
HXLINE(  27)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/cavern.ogg",60,fa,dd,b4),null(),null(),null());
HXLINE(  29)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  30)		bg->loadGraphic(HX_("assets/images/bg.png",6b,23,cd,e0),null(),null(),null(),null(),null());
HXLINE(  31)		this->add(bg);
HXLINE(  33)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmo3Loader_obj::__alloc( HX_CTX ,HX_("assets/data/cavern.ogmo",66,5a,cd,4c),HX_("assets/data/cavern.json",14,66,88,49));
HXLINE(  34)		this->walls = this->map->loadTilemap(HX_("assets/images/tiles.png",35,bc,d1,f5),HX_("walls",29,0c,1f,c5),null());
HXLINE(  35)		this->walls->follow(null(),null(),null());
HXLINE(  36)		this->walls->setTileProperties(1,4369,null(),null(),null());
HXLINE(  37)		this->walls->setTileProperties(2,0,null(),null(),null());
HXLINE(  38)		this->add(this->walls);
HXLINE(  40)		this->_player =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,200,200,null());
HXLINE(  41)		this->_player->loadGraphic(HX_("assets/images/londyn.png",34,d7,01,6e),true,100,100,null(),null());
HXLINE(  42)		this->add(this->_player);
HXLINE(  44)		this->coins =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  45)		this->add(this->coins);
HXLINE(  47)		this->map->loadEntities(this->placeEntities_dyn(),HX_("entities",41,96,95,92));
HXLINE(  49)		this->_player->acceleration->set_y(( (Float)(600) ));
HXLINE(  51)		::flixel::FlxG_obj::camera->follow(this->_player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),1);
HXLINE(  53)		this->super::create();
            	}


void PlayState_obj::placeEntities( ::Dynamic entity){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_58_placeEntities)
HXDLIN(  58)		if (::hx::IsEq( entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("player",61,eb,b8,37) )) {
HXLINE(  60)			this->_player->setPosition(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic));
            		}
            		else {
HXLINE(  62)			if (::hx::IsEq( entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic),HX_("coin",91,b5,c4,41) )) {
HXLINE(  64)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->coins;
HXDLIN(  64)				_hx_tmp->add( ::Coin_obj::__alloc( HX_CTX ,( (Float)((entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic) + 4)) ),( (Float)((entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic) + 4)) ))).StaticCast<  ::Coin >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,placeEntities,(void))

void PlayState_obj::playerOverlapsCoins( ::flixel::FlxSprite _player, ::Coin coins){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_70_playerOverlapsCoins)
HXDLIN(  70)		coins->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerOverlapsCoins,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_74_update)
HXLINE(  75)		this->super::update(elapsed);
HXLINE(  77)		{
HXLINE(  77)			 ::Dynamic NotifyCallback = null();
HXDLIN(  77)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_player) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE(  78)		::flixel::FlxG_obj::overlap(this->_player,this->coins,this->playerOverlapsCoins_dyn(),null());
HXLINE(  80)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  80)		if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE(  82)			{
HXLINE(  82)				 ::flixel::FlxSprite _g = this->_player;
HXDLIN(  82)				_g->set_x((_g->x + 1));
            			}
HXLINE(  83)			this->_player->set_flipX(false);
            		}
HXLINE(  86)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  86)		if (_this1->keyManager->checkStatus(37,_this1->status)) {
HXLINE(  88)			{
HXLINE(  88)				 ::flixel::FlxSprite _g = this->_player;
HXDLIN(  88)				_g->set_x((_g->x - ( (Float)(1) )));
            			}
HXLINE(  89)			this->_player->set_flipX(true);
            		}
HXLINE(  92)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  92)		if (_this2->keyManager->checkStatus(32,_this2->status)) {
HXLINE(  94)			 ::flixel::FlxSprite _g = this->_player;
HXDLIN(  94)			_g->set_y((_g->y - ( (Float)(10) )));
            		}
            	}



::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(ground,"ground");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(walls,"walls");
	HX_MARK_MEMBER_NAME(coins,"coins");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(ground,"ground");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(walls,"walls");
	HX_VISIT_MEMBER_NAME(coins,"coins");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"walls") ) { return ::hx::Val( walls ); }
		if (HX_FIELD_EQ(inName,"coins") ) { return ::hx::Val( coins ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ground") ) { return ::hx::Val( ground ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return ::hx::Val( _player ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return ::hx::Val( placeEntities_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"playerOverlapsCoins") ) { return ::hx::Val( playerOverlapsCoins_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmo3Loader >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"walls") ) { walls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coins") ) { coins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ground") ) { ground=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_player",00,fd,2f,a6));
	outFields->push(HX_("ground",87,22,28,1c));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("walls",29,0c,1f,c5));
	outFields->push(HX_("coins",c2,29,5a,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,_player),HX_("_player",00,fd,2f,a6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,ground),HX_("ground",87,22,28,1c)},
	{::hx::fsObject /*  ::flixel::addons::editors::ogmo::FlxOgmo3Loader */ ,(int)offsetof(PlayState_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,walls),HX_("walls",29,0c,1f,c5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,coins),HX_("coins",c2,29,5a,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("_player",00,fd,2f,a6),
	HX_("ground",87,22,28,1c),
	HX_("map",9c,0a,53,00),
	HX_("walls",29,0c,1f,c5),
	HX_("coins",c2,29,5a,4a),
	HX_("create",fc,66,0f,7c),
	HX_("placeEntities",28,e6,91,17),
	HX_("playerOverlapsCoins",f5,56,f5,35),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

